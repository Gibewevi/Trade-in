generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  FREE
  INVESTMENT
  TRADERPRO
}

model user {
  id                      Int                     @id @default(autoincrement())
  email                   String                  @unique
  password                String
  isVerified              Boolean                 @default(false)

  billing                 billing?
  invoices                invoice[]
  passwordResetTokens     PasswordResetToken[]    // Ajoutez cette ligne

  @@map("users")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique
  userId    Int
  user      user     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}
model billing {
  id                   Int       @id @default(autoincrement())
  userId               Int       @unique
  fullName             String
  billingAddressLine1  String
  billingAddressLine2  String?
  billingCity          String
  billingState         String
  billingPostalCode    String
  billingCountry       String

  user user            @relation(fields: [userId], references: [id])

  @@map("billings")
}

model devise {
  id          Int    @id @default(autoincrement())
  country     String
  countryCode String
  currency    String
  code        String
}

model invoice {
  id            Int       @id @default(autoincrement())
  userId        Int
  courseId      Int
  date          DateTime  @default(now())
  totalAmount   Float     // Montant TTC
  amountHt      Float?    // Montant HT, calculé après
  tps           Float?    // Montant de la TPS, calculé après
  tvp           Float?    // Montant de la TVP, calculé après
  taxRate       Float?    // Taux de taxe total
  exchangeRate  Float?    // Taux de change
  currency      String
  countryCode   String    // Region pour calcul des taxes
  regionCode    String    // Pays pour calcul des taxes
  paymentStatus String

  user user     @relation(fields: [userId], references: [id])

  @@map("invoices")
}

model tax_rate {
  id                 Int       @id @default(autoincrement())
  province           String
  abbreviation       String
  tps                Float
  tvp                Float
  totalTax           Float

  @@map("tax_rates")
}

model course {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  price       Int       // Prix en centimes pour éviter les problèmes de virgule flottante
  active      Boolean   @default(true)
  chapters    chapter[]
  
  @@map("courses")
}

model chapter {
 id          Int       @id @default(autoincrement())
 chapterId   Int       @unique
 title       String
 description String
 lessons     lesson[]  @relation("chapterToLesson")
 duration    Int       @default(0)
 courseId Int
 course   course @relation(fields: [courseId], references: [id])

 @@map("chapters")
}

model lesson {
 id           Int        @id @default(autoincrement())
 lessonId     Int        @unique
 title        String
 slug         String     @unique
 contentUrl   String
 thumbnailUrl String
 isNew        Boolean    @default(true)
 createdAt    DateTime   @default(now())
 chapterId    Int
 chapter      chapter    @relation("chapterToLesson", fields: [chapterId], references: [chapterId])
 accessLevel  AccessLevel
 isFree       Boolean    @default(false)
 duration     Int        @default(0)

 @@map("lessons")
}

model Tweet {
  id          Int      @id @default(autoincrement())
  tweetId     String   @unique 
  content     String  
  publishedAt DateTime 
  createdAt   DateTime @default(now()) 

  @@map("tweets") 
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  prompt      String?  
  articles    Article[] @relation("categoryToArticle")
  
  @@map("categories")
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  htmlContent String
  publishedAt DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int
  category    Category  @relation("categoryToArticle", fields: [categoryId], references: [id])
  
  @@map("articles")
}
